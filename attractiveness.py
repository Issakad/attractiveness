#!/usr/bin/env python
# coding: utf-8

# In[13]:


import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#from PIL import Image

#image = Image.open('logo.PNG')
#st.sidebar.image(image, width=200)
from pathlib import Path

# Assurez-vous que le fichier est r√©f√©renc√© correctement
#st.sidebar.image("logo.PNG")

#import seaborn as sns
import os
#print(os.listdir("C:\\Users\\Utilisateur\\Desktop\\Collaboration\\Recherche acad√©mique\\Projets d'articles\\Fiscalit√© locale\\Dashboard\\"))
#print(os.listdir("C:\\Users\\Utilisateur\\Desktop\\Data science\\Openclassrooms\\Projet 7\\data\\"))

# Chargement des donn√©es de d√©monstration
data = pd.read_excel("C:\\Users\\Utilisateur\\Desktop\\Collaboration\\Recherche acad√©mique\\Projets d'articles\\Fiscalit√© locale\\Dashboard\\data2019.xlsx") # Assurez-vous de remplacer "data.csv" par le chemin de votre fichier de donn√©es
# Ajout de l'index √† la DataFrame data


# Titre du dashboard
# S√©lectionner al√©atoirement 100 lignes de votre DataFrame
random_rows = data.sample(n=100, random_state=42)

# Titre du dashboard
st.title("Dashboard d'attractivit√© des communes d'Outre-Mer fran√ßais")
st.subheader("Travail r√©alis√© par les chercheurs du CREDDI")
# S√©lection de l'ann√©e
annee_selectionnee = st.sidebar.selectbox("S√©lectionner l'ann√©e", sorted(data['Annee'].unique()))
# Afficher les 100 lignes s√©lectionn√©es al√©atoirement
st.subheader("Donn√©es utilis√©es")
#st.write("100 lignes s√©lectionn√©es al√©atoirement du tableau :")
#st.dataframe(random_rows)



# Ajouter une bo√Æte de s√©lection dans la barre lat√©rale
show_data = st.sidebar.selectbox('Afficher les donn√©es utilis√©es', ('Non', 'Oui'))

# Afficher les donn√©es si l'utilisateur s√©lectionne 'Oui'
if show_data == 'Oui':
    st.write("100 lignes s√©lectionn√©es al√©atoirement du tableau :")
    st.dataframe(random_rows)


# S√©lection du nom de la commune
commune_selectionnee = st.sidebar.selectbox("S√©lectionner une commune", sorted(data['NomCommune'].unique()))

# Filtrer les donn√©es pour ne conserver que celles de la commune s√©lectionn√©e
donnees_commune = data[data['NomCommune'] == commune_selectionnee]

# Afficher les donn√©es de la commune s√©lectionn√©e
st.subheader("Les donn√©es de la commune s√©lectionn√©e")
st.write(f"Donn√©es pour la commune s√©lectionn√©e ({commune_selectionnee}) :")
st.write(donnees_commune)

# S√©lectionner les donn√©es de la commune s√©lectionn√©e
commune_selected_data = data[data['NomCommune'] == commune_selectionnee].iloc[0]
#commune_selected_data = st.selectbox('S√©lectionnez votre commune', data['CodeCommune'].unique())
# Extraire les valeurs des diff√©rentes variables pour la commune s√©lectionn√©e
# Afficher la liste des colonnes de commune_selected_data
#st.write(data.columns)

commune_selected_data=data.copy()


# Extraire les valeurs des diff√©rentes variables pour la commune s√©lectionn√©e
dynamisme_economique = commune_selected_data['Economie']
dependance_vieillesse = commune_selected_data['Demographie']
pression_fiscale = commune_selected_data['Fiscalite']
chomage = commune_selected_data['Chomage']
gouvernance = commune_selected_data['Gouvernance']
biens_publics = commune_selected_data['Goods']

# Calcul du score d'attractivit√© selon la formule donn√©e
score_attractivite = (3 ** 0.5) / 4 * (dynamisme_economique * dependance_vieillesse +
                                       dependance_vieillesse * pression_fiscale +
                                       pression_fiscale * chomage +
                                       chomage * gouvernance +
                                       gouvernance * biens_publics +
                                       biens_publics * dynamisme_economique)

# Cr√©ation d'une nouvelle Series avec les noms des communes comme index
scores_communes = pd.Series(score_attractivite.values, index=data['NomCommune'])

# Extraction du score de la commune s√©lectionn√©e
score_commune_selectionnee = scores_communes.get(commune_selectionnee)
st.subheader("Le score d'attractivit√© de la commune s√©lectionn√©e et son classement")
# Affichage du score d'attractivit√© de la commune s√©lectionn√©e avec 3 chiffres apr√®s la virgule
if score_commune_selectionnee is not None:
    st.write(f"Le score d'attractivit√© de la commune s√©lectionn√©e ({commune_selectionnee}) est: {score_commune_selectionnee:.3f}")
else:
    st.write(f"Aucun score d'attractivit√© trouv√© pour la commune s√©lectionn√©e ({commune_selectionnee})")
# Trier les scores des communes par ordre d√©croissant
scores_communes_sorted = scores_communes.sort_values(ascending=False)

# Trouver le rang de la commune s√©lectionn√©e
rang_commune_selectionnee = scores_communes_sorted.index.get_loc(commune_selectionnee) + 1

# Afficher le rang de la commune s√©lectionn√©e
st.write(f"Le rang de la commune s√©lectionn√©e ({commune_selectionnee}) selon son score est: {rang_commune_selectionnee}")
# D√©finir les seuils pour chaque cat√©gorie
seuil_faible = 0.333
seuil_moyen = 0.67

# D√©terminer la cat√©gorie de la commune s√©lectionn√©e
if score_commune_selectionnee <= seuil_faible:
    categorie_commune = "faiblement attractive üè¢  ‚≠ê‚≠ê"
elif score_commune_selectionnee <= seuil_moyen:
    categorie_commune = " moyennement attractive üè¢  ‚≠ê‚≠ê‚≠ê"
else:
    categorie_commune = "fortement attractive üè¢  ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"

# Afficher la cat√©gorie de la commune s√©lectionn√©e
st.write(f"La commune s√©lectionn√©e ({commune_selectionnee}) est {categorie_commune}.")

st.subheader("Les facteurs explicatifs du score d'attractivit√© de la commune s√©lectionn√©e")
#Dimensions de l'indice
dimensions = ['Dynamisme √©conomique', 'D√©pendance vieillesse', 'Pression fiscale', 'Ch√¥mage', 'Gouvernance', 'Biens publics']
# Calculer les angles pour chaque dimension
num_dimensions = len(dimensions)
angles = np.linspace(0, 2 * np.pi, num_dimensions, endpoint=False).tolist()
angles += angles[:1]  # R√©p√©ter le premier angle pour fermer le graphique

# Convertir les noms de commune en minuscules dans la DataFrame
data['NomCommune'] = data['NomCommune'].str.lower()

# Convertir le nom de la commune s√©lectionn√©e en minuscules
commune_selectionnee = commune_selectionnee.lower()

# S√©lectionner les donn√©es de la commune s√©lectionn√©e
commune_selected_data = data.set_index('NomCommune').loc[commune_selectionnee]

# R√©cup√©rer les valeurs pour la commune s√©lectionn√©e
values = [
    commune_selected_data['Economie'],
    commune_selected_data['Demographie'],
    commune_selected_data['Fiscalite'],
    commune_selected_data['Chomage'],
    commune_selected_data['Gouvernance'],
    commune_selected_data['Goods']
]




values += values[:1]  # R√©p√©ter la premi√®re valeur pour fermer le graphique
#st.write(values )
# Convertir les valeurs des dimensions en float
#values = [dynamisme_economique.values[0], dependance_vieillesse.values[0], pression_fiscale.values[0], chomage.values[0], gouvernance.values[0], biens_publics.values[0]]

# R√©p√©ter la premi√®re valeur pour fermer le graphique
#values += values[:1]

# Cr√©er le graphique en radar
plt.figure(figsize=(6, 6))
ax = plt.subplot(111, polar=True)
ax.fill(angles, values, color='blue', alpha=0.2)  # Remplir la zone du graphique
ax.plot(angles, values, color='blue', linewidth=1)  # Tracer les lignes du graphique
ax.set_yticklabels([])  # Masquer les √©tiquettes sur l'axe y
ax.set_xticks(angles[:-1])  # Positionner les √©tiquettes des axes

# Ajouter les noms des axes
ax.set_xticklabels(dimensions, fontsize=8)

# Afficher les valeurs des √©tiquettes
for angle, value, dimension in zip(angles[:-1], values[:-1], dimensions):
    ax.text(angle, value, f'{value:.2f}', ha='center', va='bottom')

# Afficher le graphique
st.set_option('deprecation.showPyplotGlobalUse', False)
st.pyplot()

st.subheader("Classement de toutes les communes")
# S√©lectionner les colonnes n√©cessaires pour le tableau
table_data = data[['NomCommune', 'Nom2022D√©partement']]
table_data['Score'] = score_attractivite
# Ajouter une colonne "Classement" en fonction des scores d'attractivit√©
table_data['Classement'] = table_data['Score'].rank(ascending=False, method='dense').astype(int)
# Ajouter une colonne "Cat√©gorie" en fonction des scores d'attractivit√©
table_data['Cat√©gorie'] = pd.cut(table_data['Score'], bins=[-np.inf, 0.333, 0.67, np.inf], labels=['Attractivit√© Faible', 'Attractivit√© Moyenne', 'Attractivit√© Forte'], right=False)
# D√©finir une fonction pour mapper les cat√©gories aux r√©compenses
def map_reward(category):
    if category == 'Attractivit√© Faible':
        return '‚≠ê‚≠ê'
    elif category == 'Attractivit√© Moyenne':
        return '‚≠ê‚≠ê‚≠ê'
    elif category == 'Attractivit√© Forte':
        return '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê'

# Ajouter une colonne "Reward" en utilisant la fonction de mappage
table_data['Reward'] = table_data['Cat√©gorie'].apply(lambda x: map_reward(x))



# Afficher le tableau
st.write("Tableau des informations des communes:")
st.write(table_data)













st.subheader("Rep√®res")

# S√©lectionner le score de la commune s√©lectionn√©e
data['Score'] = score_attractivite
score_commune_selected = data[data['NomCommune'] == commune_selectionnee]['Score'].values[0]

# Score minimal, maximal et m√©dian de l'√©chantillon
score_min = data['Score'].min()
score_max = data['Score'].max()
score_median = data['Score'].median()

# Cr√©er un sous-graphique pour chaque cat√©gorie
plt.figure(figsize=(10, 6))

# Histogramme du score de la commune s√©lectionn√©e
plt.subplot(2, 2, 1)
plt.hist(score_commune_selected, bins=10, color='skyblue', edgecolor='black')
plt.title('Score de la commune s√©lectionn√©e')
plt.xlabel('Score')
plt.ylabel('Fr√©quence')

# Histogramme du score minimal de l'√©chantillon
plt.subplot(2, 2, 2)
plt.hist(score_min, bins=10, color='salmon', edgecolor='black')
plt.title('Score minimal de l\'√©chantillon')
plt.xlabel('Score')
plt.ylabel('Fr√©quence')

# Histogramme du score maximal de l'√©chantillon
plt.subplot(2, 2, 3)
plt.hist(score_max, bins=10, color='lightgreen', edgecolor='black')
plt.title('Score maximal de l\'√©chantillon')
plt.xlabel('Score')
plt.ylabel('Fr√©quence')

# Histogramme du score m√©dian de l'√©chantillon
plt.subplot(2, 2, 4)
plt.hist(score_median, bins=10, color='orange', edgecolor='black')
plt.title('Score m√©dian de l\'√©chantillon')
plt.xlabel('Score')
plt.ylabel('Fr√©quence')

# Ajuster le placement des sous-graphiques pour √©viter les chevauchements
plt.tight_layout()

# Afficher le graphique sur Streamlit
st.pyplot()




# Cr√©er un graphique pour afficher les histogrammes
plt.figure(figsize=(10, 6))

# D√©finir les positions des barres
positions = [1, 2, 3, 4]

# Largeur des barres
width = 0.3
# Trouver le nom de la commune ayant le score minimal
commune_min_score = data[data['Score'] == data['Score'].min()]['NomCommune'].values[0]
commune_max_score = data[data['Score'] == data['Score'].max()]['NomCommune'].values[0]

# Diagramme en barres du score de la commune s√©lectionn√©e
plt.bar(positions[0], score_commune_selected, width, color='skyblue', label='Commune s√©lectionn√©e')

# Diagramme en barres du score minimal de l'√©chantillon
plt.bar(positions[1], score_min, width, color='salmon', label='Score minimal')

# Diagramme en barres du score maximal de l'√©chantillon
plt.bar(positions[2], score_max, width, color='lightgreen', label='Score maximal')

# Diagramme en barres du score m√©dian de l'√©chantillon
plt.bar(positions[3], score_median, width, color='orange', label='Score m√©dian')

# D√©finir les √©tiquettes des positions
plt.xticks(positions, ['Score de la cmmune s√©lectionn√©e', 'Score minimal', 'Score maximal', 'Score m√©dian'])

# Ajouter une l√©gende
plt.legend()

# Ajouter des titres et des √©tiquettes
plt.title('Distribution des scores des communes')
plt.xlabel('Cat√©gories')
plt.ylabel('Score')

# Afficher le graphique
st.pyplot()


# Cr√©er un graphique pour afficher les histogrammes
plt.figure(figsize=(10, 6))

# D√©finir les positions des barres
positions = [1, 2, 3, 4]

# Largeur des barres
width = 0.3

# Diagramme en barres du score de la commune s√©lectionn√©e
plt.bar(positions[0], score_commune_selected, width, color='skyblue', label=f'{commune_selectionnee}')

# Diagramme en barres du score minimal de l'√©chantillon
plt.bar(positions[1], score_min, width, color='salmon', label=f'{commune_min_score}')

# Diagramme en barres du score maximal de l'√©chantillon
plt.bar(positions[2], score_max, width, color='lightgreen', label=f'{commune_max_score}')

# Diagramme en barres du score m√©dian de l'√©chantillon
plt.bar(positions[3], score_median, width, color='orange', label='Score m√©dian')

# D√©finir les √©tiquettes des positions
plt.xticks(positions, [' Score de la commune s√©lectionn√©e', 'Score minimal', 'Score maximal', 'Score m√©dian'])

# Ajouter une l√©gende
plt.legend()

# Ajouter des titres et des √©tiquettes
plt.title('Position de la commune s√©lectionn√©e')
plt.xlabel('Cat√©gories')
plt.ylabel('Score')
st.pyplot()


# In[ ]:





# In[ ]:




